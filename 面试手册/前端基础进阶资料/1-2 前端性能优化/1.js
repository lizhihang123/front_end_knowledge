// 1. 页面加载缓慢的原因
// 1.1 浏览器角度
//     网络请求 - 网络请求过多 响应的速度很快 但是响应回来下载花费时间长
//         资源 图片 太大了 
//         资源访问的带宽 - 用户的带宽
//     浏览器渲染层面
//         需要先构建DOM树和CSS树，耗费时间
//         HTML和CSS和JS都会对渲染产生阻塞，可以从CSS和JS方面进行优化
//         重复的渲染：重排和重绘
//         DNS解析：从域名 - IP 地址，中间转化的越快 请求也会越快
    

// 1.2 服务端角度
//     硬件的配置问题 前后端的硬件
//     防火墙的限制带宽
//     Nginx这类web服务器的优化
//     CPU占满 后台服务器的优化
//     代码的效率问题
//     有很多的分析类的工具

// 1.3 代码的角度
//     构建层面
//         代码的打包 
//         合并重复的代码 函数
//     编码层面
//         编码是否规范 - 工具 eslint
//         错误编写JS和CSS代码
//         for循环遍历的去数据库查询数据
//         对代码是否进行重构？设计模式 - 下次修改时，修改量特别的大
//         没有删除无用的代码
//     机制层面
//         页面的懒加载 组件懒加载 图片懒加载
//         未加入异步机制 异步和同步 同时进行能够提高代码执行的效率
//     规范层面
//         CSS HTML规范
//         Airbnb代码规范



// 2. 优化的原则

// 2.1 减少HTTP请求
    // 使用雪碧图 sprite图 精灵图
    // 使用base64的小图片

// 2.2 使用CDN 内容分发网络
    // 受众越来越广时,不可能在每个地方都搞一个服务器
    // 内容分发网络就出现了,专门的CDN服务商或者公用开源的CDN服务商

// 2.3 避免空的src或者href
    // 也会向文件所在目录发送请求给服务器造成负担 占用计算资源
    // 具体操作 1. 删除src和href属性
    // 2. {/* <a href="#"></a>
    // <a href="#nogo"></a>
    // <a href="##"></a>
    // <a href="###"></a>
    // <a href="void(0);"></a>
    // <a href="void(0)"></a>
    // <a href=";"></a>

    // 3. 添加样式 或者是添加onclick事件
    {/* <style>
        a{cursor: pointer}
    </style>
    <a>点击一</a>
    <a onclick="doSomething()">点击二</a> */}

    // 4. href添加描述信息 js监听事件
    {/* <a href="#Something_De scriptive" id="my_id">Trigger</a>
    <script>
        $("#my_id").click(function(e){
            e.preventDefault(); //取消单击事件的默认动作以阻止链接的跳转。
            //  其他的代码
    })
    </script> */}

